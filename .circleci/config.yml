version: 2.1

defaults: &defaults
    working_directory: ~/project
    docker:
      - image: circleci/python:3.8.5

prepare_venv: &prepare_venv
  run:
    name: Create env
    command: |
      python3 -m venv venv
      source venv/bin/activate
      pip install --upgrade pip

jobs:
  test_classification_model:
    <<: *defaults
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - *prepare_venv
      - restore_cache:
          keys:
            - py-deps-{{checksum "packages/classification_model/requirements.txt"}}
      - run:
          name: Running tests
          command: |
            . venv/bin/activate
            pip install -r packages/classification_model/requirements.txt
            py.test -vv packages/classification_model/tests
      - save_cache:
          paths: 
            - "/venv"
          key: py-deps-{{checksum "packages/classification_model/requirements.txt"}}

  test_ml_api:
    <<: *defaults
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - *prepare_venv
      - restore_cache:
          keys:
            - py-deps-{{checksum "packages/ml_api/requirements.txt"}}
      - run:
          name: Running tests
          command: |
            . venv/bin/activate
            pip install -r packages/ml_api/requirements.txt
            py.test -vv packages/ml_api/tests -m "not differential"
      - save_cache:
          paths:
            - "/venv"
          key: py-deps-{{checksum "packages/ml_api/requirements.txt"}}

  train_and_upload_classification_model:
    <<: *defaults
    steps:
      - checkout
      - run: git submodule sync
      - run: git submodule update --init
      - *prepare_venv
      - restore_cache:
          keys:
            - py-deps-{{checksum "packages/classification_model/requirements.txt"}}
      - run:
          name: Setup env
          command: |
            . venv/bin/activate
            pip install -r packages/classification_model/requirements.txt
      - run:
          name: Train model
          command: |
            . venv/bin/activate
            PYTHONPATH=./packages/classification_model python3 packages/classification_model/classification_model/train_pipeline.py
      - run:
          name: Publish model to Gemfury
          command: |
            . venv/bin/activate
            chmod +x ./scripts/publish_model.sh
            ./scripts/publish_model.sh ./packages/classification_model/
      - save_cache:
          paths:
            - "/venv"
          key: py-deps-{{checksum "packages/classification_model/requirements.txt"}}

  differential_tests:
    <<: *defaults
    steps:
        - checkout
        - run: git submodule sync
        - run: git submodule update --init
        - *prepare_venv
        - run:
            name: Capture previous model predictions
            command: |
              . venv/bin/activate
              pip install -r packages/ml_api/diff_test_requirements.txt
              PYTHONPATH=./packages/ml_api python3 packages/ml_api/tests/differential_tests/capture_model_prediction.py
        - run:
            name: Run diffrential_test
            command: |
              . venv/bin/activate
              pip install -r packages/ml_api/requirements.txt
              py.test -vv packages/ml_api/tests -m differential

  deploy_to_heroku_without_docker:
    <<: *defaults
    steps:
        - checkout
        - run: git submodule sync
        - run: git submodule update --init
        - run:
            name: Deploy to Heroku
            command: |
              git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git main

  deploy_to_heroku_with_docker:
    <<: *defaults
    steps:
        - checkout
        - run: git submodule sync
        - run: git submodule update --init
        - setup_remote_docker:
            version: 20.10.2
            #docker_layer_caching: true
        - run: docker login --username=$HEROKU_EMAIL --password=$HEROKU_API_KEY registry.heroku.com
        - run:
            name: Setup Heroku CLI
            command: |
              wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh
        - run: 
            name: Build and Push Image
            command: |
              make build-ml-api-heroku push-ml-api-heroku
        - run: 
            name: Release to Heroku
            command: |
              heroku container:release web --app $HEROKU_APP_NAME


workflows:
  version: 2.1
  test-all:
    jobs:
      - test_classification_model
      - test_ml_api
      - differential_tests
      - train_and_upload_classification_model:
          requires:
            - test_classification_model
            - test_ml_api
            - differential_tests
          filters:
            branches:
              only:
                - main
      - deploy_to_heroku_with_docker:
          requires:
            - train_and_upload_classification_model
          filters:
            branches:
              only:
                - main
      # - deploy_to_heroku_without_docker:
      #     requires:
      #       - train_and_upload_classification_model
      #     filters:
      #       branches:
      #         only:
      #           - main







